<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- 注解扫描包 -->
	<context:component-scan base-package="com.zzb.*.controller" />

	<!-- <context:component-scan base-package="org.activiti.rest.editor" />
	
	<context:component-scan base-package="org.activiti.rest.diagram" /> -->
	
	<mvc:annotation-driven>
        <mvc:argument-resolvers>
            <bean class="com.zzb.base.realm.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>
    
	<!-- <context:component-scan /> -->
	<!-- 扫描指定的包中的类上的注解，常用的注解有： -->
	<!-- @Controller 声明Action组件 -->
	<!-- @Service 声明Service组件 @Service("xxxService") -->
	<!-- @Repository 声明Dao组件 -->
	<!-- @Component 泛指组件, 当不好归类时. -->
	<!-- @RequestMapping("/menu") 请求映射 -->
	<!-- @Resource 用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") -->
	<!-- @Autowired 用于注入，(spring提供的) 默认按类型装配 -->
	<!-- @Transactional( rollbackFor={Exception.class}) 事务管理 -->
	<!-- @ResponseBody将内容或对象作为 HTTP 响应正文返回，并调用适合HttpMessageConverter的Adapter转换对象，写入输出流 -->
	<!-- @Scope("prototype") 设定bean的作用域 -->

	<!-- 开启MVC注解,表示SpringMVC支持注解功能 做了很多事情，不包括添加自己定义的拦截器 -->
	<mvc:annotation-driven />

	<!-- 拦截器 -->
	<!-- <mvc:interceptors> <bean class="com.zzb;.inteceptor" /> </mvc:interceptors> -->

	<!-- 方案一 （二选一）表示不对静态资源如CSS、JS、HTML等进行拦截 -->
	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源,使用默认的servlet来响应请求 -->
<!-- 	<mvc:default-servlet-handler /> -->

	<!-- 方案二 （二选一） 静态资源映射 -->
	<mvc:resources mapping="/images/**" location="/WEB-INF/images/" />
	<mvc:resources mapping="/css/**" location="/WEB-INF/css/" />
	<mvc:resources mapping="/jslib/**" location="/WEB-INF/jslib/" />
	<mvc:resources mapping="/driver/**" location="/WEB-INF/driver/" />
	<mvc:resources mapping="/easyui/**" location="/WEB-INF/easyui/" />
	<mvc:resources mapping="/**" location="/" />
	
	<!-- 视图文件解析配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 警告，可能与<mvc:annotation-driven />重复 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="mappingJackson2HttpMessageConverter" 
		/> </list> </property> </bean> -->

	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>WEB-INF/resources/config</value>
			</list>
		</property>
	</bean>

	<!--定义异常处理页面 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.SQLException">/WEB-INF/views/error/500.jsp</prop>
				<prop key="java.io.IOException">/WEB-INF/views/error/500.jsp</prop>
			</props>
		</property>
	</bean>

	<!-- 开启shiro注解，必须放入springmvc的配置文件中 -->
	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 在应用启动时候,配置AOP事务 的时候会扫描service层,service层用到了Dao层的接口代理模式(spring 默认) 因为本项目没有采用接口模式编程所以就要用CGLIB -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- JDK代理，用于接口 -->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor" /> -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="exceptionHandler" class="com.zzb.base.controller.ExceptionHandler" />
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 --> 
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
	    <property name="defaultEncoding" value="UTF-8"/> 
	    <!-- 指定所上传文件的总大小不能超过200M。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 --> 
	    <property name="maxUploadSize" value="200000000"/>
	    <!-- 最大内存大小 (10240)--> 
	    <property name="maxInMemorySize" value="40960" />
	</bean> 
</beans>
